require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/profiles", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {username: "valid-user"}

  }

  let(:invalid_attributes) {
    {username: "invalid,!username"}
  }

  let(:invalid_superuser) {
    {username: "valid-username", superuser: true}

  }

  describe "GET /index" do
    it "renders a successful response" do
      Profile.create! valid_attributes
      get profiles_url
      expect(response).to be_successful
    end
  end

  describe "GET /index.json" do
    it "renders a successful response" do
      Profile.create! valid_attributes
      get "/profiles.json"
      expect(response).to be_successful
      expect(JSON.parse(response.body)).to eq(Profile.all.as_json)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      profile = Profile.create! valid_attributes
      get profile_url(profile)
      expect(response).to be_successful
    end
  end

  describe "GET /show.json" do
    it "renders a successful response" do
      profile = Profile.create! valid_attributes
      get profile_url(profile) + ".json"
      expect(response).to be_successful
      expect(JSON.parse(response.body)).to eq(Profile.last.as_json)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_profile_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      profile = Profile.create! valid_attributes
      get edit_profile_url(profile)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    describe "POST /create.json" do
      it "creates a new Profile" do
        post "/profiles.json", params: { profile: valid_attributes }
        expect(response).to have_http_status(:success)
        expect(Profile.last.username).to eq('valid-user')
        expect(JSON.parse(response.body)).to eq(
          Profile.last.as_json
        )
      end
      it "creates a new Profile with invalid parameters" do
        post "/profiles.json", params: { profile: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to eq({"username"=>["is invalid"]})
      end
      it "should not allow set superuser parameter" do
        post "/profiles.json", params: { profile: { username: 'valid-user', superuser: true } }
        expect(response).to have_http_status(:success)
        expect(Profile.last.superuser).to be false
        expect(JSON.parse(response.body)).to eq(
          Profile.last.as_json
        )
      end
    end
    context "with valid parameters" do
      it "creates a new Profile" do
        expect {
          post profiles_url, params: { profile: valid_attributes }
        }.to change(Profile, :count).by(1)
      end

      it "redirects to the created profile" do
        post profiles_url, params: { profile: valid_attributes }
        expect(response).to redirect_to(profile_url(Profile.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Profile" do
        expect {
          post profiles_url, params: { profile: invalid_attributes }
        }.to change(Profile, :count).by(0)
      end
    end

    context "with invalid super user parameter" do
      it "does not create a new Profile" do
        expect {
          post profiles_url, params: { profile: invalid_superuser }
        }.to change(Profile, :count).by(1)
        expect(Profile.last.superuser).to be false
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {username: "valid-user-2"}
      }

      it "updates the requested profile" do
        profile = Profile.create! valid_attributes
        patch profile_url(profile), params: { profile: new_attributes }
        profile.reload
        expect(profile.username).to be profile[:username]
      end

      it "redirects to the profile" do
        profile = Profile.create! valid_attributes
        patch profile_url(profile), params: { profile: new_attributes }
        profile.reload
        expect(response).to redirect_to(profile_url(profile))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        profile = Profile.create! valid_attributes
        patch profile_url(profile), params: { profile: invalid_attributes }
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested profile" do
      profile = Profile.create! valid_attributes
      expect {
        delete profile_url(profile)
      }.to change(Profile, :count).by(-1)
    end

    it "redirects to the profiles list" do
      profile = Profile.create! valid_attributes
      delete profile_url(profile)
      expect(response).to redirect_to(profiles_url)
    end
  end
end
